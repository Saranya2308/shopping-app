@Library('jenkins-shared-library') _

pipeline {
    agent any
    environment {
        SERVICE = 'payment-service'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Checking out application source..."
                    checkout scm  // This checks out your actual app repo
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Workspace contents:"
                    if (isUnix()) {
                        sh 'ls -alh'  // List contents on Unix systems
                    } else {
                        bat 'dir'  // List contents on Windows systems
                    }

                    echo "Checking for build files..."
                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/package.json")) {
                        echo "üì¶ Found package.json for ${SERVICE}. Installing dependencies..."
                        dir(serviceDir) {
                            if (isUnix()) {
                                sh 'npm install'  // Install dependencies for Node.js on Unix
                            } else {
                                bat 'npm install'  // Install dependencies for Node.js on Windows
                            }
                        }
                    } else {
                        echo "‚ùå No package.json found in ${serviceDir}. Skipping build."
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo "Running tests for ${SERVICE}..."
                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/package.json")) {
                        dir(serviceDir) {
                            if (isUnix()) {
                                sh 'npm test'  // Run tests on Unix
                            } else {
                                bat 'npm test'  // Run tests on Windows
                            }
                        }
                    } else {
                        echo "‚ùå No tests found for ${SERVICE}. Skipping."
                    }
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    echo "Building and pushing Docker image for ${SERVICE}..."
                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/Dockerfile")) {
                        // Build the Docker image and push to a repository
                        if (isUnix()) {
                            sh "docker build -t your-docker-repo/${SERVICE}:${env.BUILD_ID} ${serviceDir}"
                            sh "docker push your-docker-repo/${SERVICE}:${env.BUILD_ID}"
                        } else {
                            bat "docker build -t your-docker-repo/${SERVICE}:${env.BUILD_ID} ${serviceDir}"
                            bat "docker push your-docker-repo/${SERVICE}:${env.BUILD_ID}"
                        }
                    } else {
                        echo "‚ùå No Dockerfile found for ${SERVICE}. Skipping Docker build."
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying ${SERVICE} to Staging..."
                    def serviceDir = "${SERVICE}/src"
                    if (isUnix()) {
                        // If it's a Unix system, use sh to deploy and start the app
                        sh "./deploy.sh ${SERVICE} staging"
                        echo "Starting service with npm start on Unix..."
                        sh "npm start"  // Start the service with npm start on Unix
                    } else {
                        // If it's a Windows system, use bat to deploy and start the app
                        bat "./deploy.bat ${SERVICE} staging"
                        echo "Starting service with npm start on Windows..."
                        bat "npm start"  // Start the service with npm start on Windows
                    }

                    // Optional: Log the deployment status
                    echo "Deployment script for ${SERVICE} executed and service started."
                }
            }
        }
    }
}
