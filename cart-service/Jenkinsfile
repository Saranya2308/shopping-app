@Library('jenkins-shared-library') _

pipeline {
    agent any
    environment {
        SERVICE = 'cart-service'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Checking out application source..."
                    checkout scm  // This checks out your actual app repo
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Workspace contents:"
                    bat 'dir'  // List contents on Windows systems

                    echo "Checking for build files..."
                    bat 'dir'  // Again listing on Windows

                    echo "Running the build process for ${SERVICE}..."
                    // Assuming the `buildApp` function is available in the shared library
                    // Or you can call the build process here directly like npm install if required
                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/package.json")) {
                        echo "üì¶ Found package.json for ${SERVICE}. Installing dependencies..."
                        dir(serviceDir) {
                            bat 'npm install'  // For Windows
                        }
                    } else {
                        echo "‚ùå No package.json found in ${serviceDir}. Skipping build."
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo "Running tests for ${SERVICE}..."
                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/package.json")) {
                        dir(serviceDir) {
                            bat 'npm test'  // Run tests on Windows
                        }
                    } else {
                        echo "‚ùå No tests found for ${SERVICE}. Skipping."
                    }
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    echo "Building and pushing Docker image for ${SERVICE}..."

                    def serviceDir = "${SERVICE}/src"
                    if (fileExists("${serviceDir}/Dockerfile")) {
                        // Build the Docker image and push to a repository (Windows)
                        bat "docker build -t your-docker-repo/${SERVICE}:${env.BUILD_ID} ${serviceDir}"
                        bat "docker push your-docker-repo/${SERVICE}:${env.BUILD_ID}"
                    } else {
                        echo "‚ùå No Dockerfile found for ${SERVICE}. Skipping Docker build."
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying ${SERVICE} to Staging..."
                    // Example: Run deployment script for the service
                    bat "./deploy.bat ${SERVICE} staging"  // Changed to a Windows batch script
                }
            }
        }
    }
}
