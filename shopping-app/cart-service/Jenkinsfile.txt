@Library('jenkins-shared-library') _

pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Explicitly define the repository and branch
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']], // Replace with your branch if different
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/Saranya2308/jenkins-shared-library.git']]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Workspace contents:"
                    // Run `ls` on Linux or `dir` on Windows
                    if (isUnix()) {
                        sh 'ls -alh'  // For Linux/Unix agents
                    } else {
                        bat 'dir'  // For Windows agents
                    }

                    // Add debugging to check if the necessary files for build exist
                    echo "Checking for build files..."
                    if (isUnix()) {
                        sh 'ls -alh'  // Adjust this based on your project files on Linux
                    } else {
                        bat 'dir'  // For Windows, check files in the workspace
                    }

                    // Run build process using the shared library function
                    echo "Running the build process..."
                    buildApp()  // Make sure this function is defined in the shared library
                }
            }
        }

        stage('Test') {
            steps {
                runTests()  // Run tests for the Notification service (optional, depending on your test setup)
            }
        }

        stage('Dockerize') {
            steps {
                dockerBuildAndPush()  // Build and push Docker image using the shared dockerBuildAndPush function
            }
        }

        stage('Deploy to Staging') {
            steps {
                deployToEnv('staging')  // Deploy to staging environment using the shared deployToEnv function
            }
        }
    }
}
